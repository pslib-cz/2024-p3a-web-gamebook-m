// <auto-generated />
using System;
using Gamebook.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gamebook.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241212150622_grrr")]
    partial class grrr
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Gamebook.Server.Models.Card", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DiceRoll1Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll2Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll3Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll4Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll5Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll6Result")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnemyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("FieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialAbilities")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CardId");

                    b.HasIndex("EnemyId")
                        .IsUnique();

                    b.HasIndex("FieldId");

                    b.HasIndex("ImageId");

                    b.HasIndex("InventoryId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Ability")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Backstory")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxDificulty")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxHP")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PointsOfDestiny")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StartingFieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Will")
                        .HasColumnType("INTEGER");

                    b.HasKey("CharacterId");

                    b.HasIndex("ImageId");

                    b.HasIndex("StartingFieldId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Enemy", b =>
                {
                    b.Property<int>("EnemyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("RewardCardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strength")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Will")
                        .HasColumnType("INTEGER");

                    b.HasKey("EnemyId");

                    b.ToTable("Enemies");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Field", b =>
                {
                    b.Property<int>("FieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DiceRoll1Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll2Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll3Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll4Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll5Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DiceRoll6Result")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EnemyId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("numOfCards")
                        .HasColumnType("INTEGER");

                    b.HasKey("FieldId");

                    b.HasIndex("EnemyId");

                    b.HasIndex("ImageId");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GameStateId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GameId");

                    b.HasIndex("GameStateId");

                    b.HasIndex("UserId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Gamebook.Server.Models.GameState", b =>
                {
                    b.Property<int>("GameStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActualFieldId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InventoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GameStateId");

                    b.HasIndex("ActualFieldId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("InventoryId");

                    b.ToTable("GameStates");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Gamebook.Server.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("InventoryId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3b5d2bc4-ad43-4df0-9b3c-5539d7ce7439",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "47389e54-1e48-4569-ad37-a8d784f960cb",
                            Name = "Author",
                            NormalizedName = "AUTHOR"
                        });
                });

            modelBuilder.Entity("Gamebook.Server.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5023aecc-4c55-4459-8f16-c29f8ce2e8b4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d7ea1894-707e-4334-8d20-95d9f5154c4f",
                            Email = "admin@localhost.test",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.TEST",
                            NormalizedUserName = "ADMIN@LOCALHOST.TEST",
                            PasswordHash = "AQAAAAIAAYagAAAAEBQ+WQsvRX7dQhO6DhusKuBRVoIJWkbPM6zNrSadN36LKsBTWWZj2feDLMtoaXJpJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.test"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = "3b5d2bc4-ad43-4df0-9b3c-5539d7ce7439",
                            UserId = "5023aecc-4c55-4459-8f16-c29f8ce2e8b4"
                        },
                        new
                        {
                            RoleId = "47389e54-1e48-4569-ad37-a8d784f960cb",
                            UserId = "5023aecc-4c55-4459-8f16-c29f8ce2e8b4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Gamebook.Server.Models.Card", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Enemy", "Enemy")
                        .WithOne("RewardCard")
                        .HasForeignKey("Gamebook.Server.Models.Card", "EnemyId");

                    b.HasOne("Gamebook.Server.Models.Field", null)
                        .WithMany("Cards")
                        .HasForeignKey("FieldId");

                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Gamebook.Server.Models.Gamebook.Server.Models.Inventory", null)
                        .WithMany("Cards")
                        .HasForeignKey("InventoryId");

                    b.Navigation("Enemy");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Character", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.HasOne("Gamebook.Server.Models.Field", "StartingField")
                        .WithMany()
                        .HasForeignKey("StartingFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("StartingField");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Field", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Enemy", "Enemy")
                        .WithMany()
                        .HasForeignKey("EnemyId");

                    b.HasOne("Gamebook.Server.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Enemy");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Game", b =>
                {
                    b.HasOne("Gamebook.Server.Models.GameState", "GameState")
                        .WithMany()
                        .HasForeignKey("GameStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameState");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Gamebook.Server.Models.GameState", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Field", "ActualField")
                        .WithMany()
                        .HasForeignKey("ActualFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.Gamebook.Server.Models.Inventory", "Inventory")
                        .WithMany()
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActualField");

                    b.Navigation("Character");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Image", b =>
                {
                    b.HasOne("Gamebook.Server.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Gamebook.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Gamebook.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Gamebook.Server.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gamebook.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Gamebook.Server.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gamebook.Server.Models.Enemy", b =>
                {
                    b.Navigation("RewardCard")
                        .IsRequired();
                });

            modelBuilder.Entity("Gamebook.Server.Models.Field", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Gamebook.Server.Models.Gamebook.Server.Models.Inventory", b =>
                {
                    b.Navigation("Cards");
                });
#pragma warning restore 612, 618
        }
    }
}
